using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp14
{
    class Program
    {
        static void Exercise1()
        {
            /* 6+9=15看起來似乎是沒問題的。可是為什麼4+6=2呢？
               如你所見，Mofiz在數位邏輯課中始終非常努力，然而在某次考試中Mofiz執行一個範圍為32bit的加法時，他在設計的部份犯了一些
               錯誤。經過了半小時後，他終於發現問題所在了！當他在執行二進位加法的過程中，原本進位時該補1到下一位卻沒有補，以致於進位
               動作沒有完全。就像下例一樣：
                  4 = 00000000 00000000 00000000 00000100
                + 6 = 00000000 00000000 00000000 00000110
            -------------------------------------------------------------
                  2 = 00000000 00000000 00000000 00000010
               對Mofiz來說，能夠發現問題所在是件好事，可惜似乎有點太晚了。講師考慮到Mofiz上課的用心，決定再給Mofiz一次機會。這次Mofiz
               必須設計出一個有效率的程式，這個程式能夠將2個無正負號10進位的整數相加，並輸出兩者的和（以10進位表示），而加法的運算方式
               必須像Mofiz剛剛的做法一樣，也就是進位時不補1到下一位。 

             */
            Console.WriteLine("Exercise1 :");
            Console.WriteLine("Enter two numbers.");
            Console.WriteLine("First one.");
            var input1 = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Another one.");
            var input2 = Convert.ToInt32(Console.ReadLine());
            string value1 = "";
            string value2 = "";

            while (input1 > 1)
            {
                if (input1 % 2 == 0)
                {
                    value1 = (input1 % 2).ToString() + value1;
                    input1 = input1 / 2;
                }
                else
                {
                    value1 = "1" + value1;
                    input1 = (input1 - 1) / 2;
                }
            }
            value1 = "1" + value1;

            //------------------------------------------------------------

            while (input2 > 1)
            {
                if (input2 % 2 == 0)
                {
                    value2 = (input2 % 2).ToString() + value2;
                    input2 = input2 / 2;
                }
                else
                {
                    value2 = "1" + value2;
                    input2 = (input2 - 1) / 2;
                }
            }
            value2 = "1" + value2;

            //------------------------------------------------------------

            int maxlength = value1.Length;
            if (value1.Length > value2.Length)
            {
                maxlength = value1.Length;
                while (value2.Length != value1.Length)
                {
                    value2 = "0" + value2;
                }
            }
            else if (value2.Length > value1.Length)
            {
                maxlength = value2.Length;
                while (value1.Length != value2.Length)
                {
                    value1 = "0" + value1;
                }
            }

            string result = "";
            for (int i = maxlength; i >= 1; i--)
            {
                if (value1[i - 1] == '0' && value2[i - 1] == '1' || value1[i - 1] == '1' && value2[i - 1] == '0')
                {
                    result = "1" + result;
                }
                else
                {
                    result = "0" + result;
                }
            }

            int value = 0;
            for (int i = result.Length; i >= 1; i--)
            {
                if (result[i - 1] == '1')
                {
                    int count = 1;
                    if (result.Length - i > 0)
                    {
                        for (int j = 1; j <= (result.Length - i); j++)
                        {
                            count = count * 2;
                        }
                    }
                    value += count;
                }
            }

            Console.WriteLine("Result : " + value);
        }

        static void Exercise2()
        {
            /* 排序在電腦科學中是一個重要的部分。已經有許多優秀的排序演算法被提出。在這個問題中我們將討論一種排序的方式，就是你只能交換相鄰
             * 的2個元素。如果你想一下的話，你會瞭解以這樣的方式總是可以將一些數字排序。（註：我們通常稱這種排序方式為Bubble Sort）給你一串
             * 整數，請你用上述的方法來將之由小到大排序。要請你求出最少要交換幾次。例如給你"1 2 3"，那需要交換的次數為0，因為已經排好了。如
             * 果給你"2 3 1"，則最少需要交換2次才可排好序。（"2 3 1" -> "2 1 3" -> "1 2 3"）
             */

            Console.WriteLine("Exercise2 :");
            Console.WriteLine("Enter numbers. (Ex : 2 3 1)");
            var input = Console.ReadLine();
            var numbers = input.Split(' ');

            int count = 0;
            for (int i = 0; i <= numbers.Length - 2; i++)
            {
                for (int j = i + 1; j <= numbers.Length - 1; j++)
                {
                    if (Convert.ToInt32(numbers[i]) > Convert.ToInt32(numbers[j]))
                    {
                        string temp = numbers[i];
                        numbers[i] = numbers[j];
                        numbers[j] = temp;
                        count++;
                    }
                }
            }

            Console.WriteLine("Minimum exchange operations : {0}", count);
        }

        static void Main(string[] args)
        {
            Exercise1();
            Exercise2();
        }

    }
}
